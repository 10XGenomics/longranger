#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "_cnv_stages.mro"

pipeline _CNV_EXOME(
    in  string     reference_path,
    in  string     sample_id,
    in  h5         fragments_h5,
    in  tsv.gz     fragment_phasing,
    in  bam        phased_possorted_bam,
    in  bed        queryRegions,
    in  int        bin,
    in  int[]      nearTargetBin,
    in  bool       addOffTarget,
    in  int        mapq,
    in  int        overlap,
    in  int        maxUnknownGap,
    in  int        maxNormalGap,
    in  int        maxHomoGap,
    in  int        minNumExons,
    in  float      BGImparityPvalFlt,
    in  float      BGBaseCovFlt,
    in  float      BGPhaseFracFlt,
    in  bedpe      wgs_deletions_gt,
    in  int        min_overlap,
    in  map        het_del_stratification,
    in  map        blacklist_map,
    in  bed        low_coverage_blacklist,
    in  json       length_mass,
    in  float      inferred_total_mass_ng,
    out bedpe      deletions,
    out bed        het_del,
    out bed        het_del_filtered,
    out bed        homo_del,
    out bed        homo_del_filtered,
    out json       summary,
    out bed        het_del_falsePositives,
    out bed        het_del_falseNegatives,
    out bed        homo_del_falsePositives,
    out bed        homo_del_falseNegatives,
    out csv        fragments,
    out txt        stat,
    out csv        fracPhased,
    out txt        covStat,
    out bed        het_gt_sen,
    out bed        het_gt_ppv,
    out bed        hom_gt_sen,
    out bed        hom_gt_ppv,
    out bed        het_del_query_region,
    out bed        hom_del_query_region,
    out vcf.gz     deletions_vcf,
    out vcf.gz.tbi deletions_vcf_index,
)
{
    call COMPUTE_CUTOFFS(
        length_mass            = self.length_mass,
        inferred_total_mass_ng = self.inferred_total_mass_ng,
    )

    call GENERATE_GROUND_TRUTH(
        reference_path         = self.reference_path,
        wgs_deletions_gt       = self.wgs_deletions_gt,
        wgsmode                = false,
        target_regions         = self.queryRegions,
        min_overlap            = self.min_overlap,
        low_coverage_blacklist = self.low_coverage_blacklist,
        blacklist_map          = self.blacklist_map,
    )

    call CONVERT_HDF5_TO_CSV(
        fragments_h5 = self.fragments_h5,
    )

    call MODIFY_BED_FILE(
        in_bed        = GENERATE_GROUND_TRUTH.het_del_query_region,
        bin           = self.bin,
        addOffTarget  = self.addOffTarget,
        nearTargetBin = self.nearTargetBin,
    )

    call MODIFY_BED_FILE_HOM_DEL(
        in_bed        = GENERATE_GROUND_TRUTH.hom_del_query_region,
        bin           = self.bin,
        addOffTarget  = self.addOffTarget,
        nearTargetBin = self.nearTargetBin,
    )

    call GET_RPM(
        fragments            = CONVERT_HDF5_TO_CSV.fragments,
        fragment_phasing     = self.fragment_phasing,
        phased_possorted_bam = self.phased_possorted_bam,
        queryRegions         = MODIFY_BED_FILE.modified,
        wgsmode              = false,
        mapq                 = self.mapq,
        overlap              = self.overlap,
    )

    call GET_RPM_HOM_DEL(
        fragments            = CONVERT_HDF5_TO_CSV.fragments,
        fragment_phasing     = self.fragment_phasing,
        phased_possorted_bam = self.phased_possorted_bam,
        queryRegions         = MODIFY_BED_FILE_HOM_DEL.modified,
        wgsmode              = false,
        mapq                 = self.mapq,
        overlap              = self.overlap,
    )

    call CALL_CNV(
        wgsmode       = false,
        rPMFiles      = GET_RPM.rPMFiles,
        maxUnknownGap = self.maxUnknownGap,
        maxNormalGap  = self.maxNormalGap,
        maxHomoGap    = self.maxHomoGap,
    )

    call CALL_HOMO_DEL(
        rPMFiles    = GET_RPM_HOM_DEL.rPMFiles,
        minNumExons = self.minNumExons,
        covStat     = GET_RPM_HOM_DEL.covStat,
    )

    call FILTER_HET_DEL(
        het_del           = CALL_CNV.het_del,
        pvalFlt           = COMPUTE_CUTOFFS.het_del_pval_flt,
        WildCovFlt        = COMPUTE_CUTOFFS.het_del_wildcov_flt,
        BGImparityPvalFlt = self.BGImparityPvalFlt,
        BGBaseCovFlt      = self.BGBaseCovFlt,
        BGPhaseFracFlt    = self.BGPhaseFracFlt,
        blacklist_map     = GENERATE_GROUND_TRUTH.blacklist_map,
        wgsmode           = false,
    )

    call FILTER_HOMO_DEL(
        homo_pval_flt          = COMPUTE_CUTOFFS.homo_del_pval_flt,
        homo_ctm_flt           = COMPUTE_CUTOFFS.homo_del_contamination_flt,
        homo_del               = CALL_HOMO_DEL.homo_del,
        het_del_filtered_bedpe = FILTER_HET_DEL.het_del_filtered_bedpe,
        blacklist_map          = GENERATE_GROUND_TRUTH.blacklist_map,
        reference_path         = self.reference_path,
        sample_name            = self.sample_id,
    )

    call ANALYZE_CNV(
        het_del                    = FILTER_HET_DEL.het_del_filtered,
        het_del_truth_sensitivity  = GENERATE_GROUND_TRUTH.het_gt_sen,
        het_del_truth_ppv          = GENERATE_GROUND_TRUTH.het_gt_ppv,
        het_del_stratification     = self.het_del_stratification,
        blacklist_map              = GENERATE_GROUND_TRUTH.blacklist_map,
        homo_del                   = FILTER_HOMO_DEL.homo_del_filtered,
        homo_del_truth_sensitivity = GENERATE_GROUND_TRUTH.hom_gt_sen,
        homo_del_truth_ppv         = GENERATE_GROUND_TRUTH.hom_gt_ppv,
        wgsmode                    = false,
    )

    return (
        fragments               = CONVERT_HDF5_TO_CSV.fragments,
        stat                    = GET_RPM.stat,
        fracPhased              = GET_RPM.fracPhased,
        het_del                 = CALL_CNV.het_del,
        het_del_filtered        = FILTER_HET_DEL.het_del_filtered,
        homo_del                = CALL_HOMO_DEL.homo_del,
        homo_del_filtered       = FILTER_HOMO_DEL.homo_del_filtered,
        deletions               = FILTER_HOMO_DEL.deletions,
        summary                 = ANALYZE_CNV.summary,
        het_del_falsePositives  = ANALYZE_CNV.het_del_falsePositives,
        het_del_falseNegatives  = ANALYZE_CNV.het_del_falseNegatives,
        homo_del_falsePositives = ANALYZE_CNV.homo_del_falsePositives,
        homo_del_falseNegatives = ANALYZE_CNV.homo_del_falseNegatives,
        covStat                 = GET_RPM.covStat,
        het_gt_sen              = GENERATE_GROUND_TRUTH.het_gt_sen,
        het_gt_ppv              = GENERATE_GROUND_TRUTH.het_gt_ppv,
        hom_gt_sen              = GENERATE_GROUND_TRUTH.hom_gt_sen,
        hom_gt_ppv              = GENERATE_GROUND_TRUTH.hom_gt_ppv,
        het_del_query_region    = GENERATE_GROUND_TRUTH.het_del_query_region,
        hom_del_query_region    = GENERATE_GROUND_TRUTH.hom_del_query_region,
        deletions_vcf           = FILTER_HOMO_DEL.deletions_vcf,
        deletions_vcf_index     = FILTER_HOMO_DEL.deletions_vcf_index,
    )
}
