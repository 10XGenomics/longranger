#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "_structvar_caller.mro"
@include "_terminal_cnv.mro"
@include "_combined_sv_caller_stages.mro"

pipeline _COMBINED_SV_CALLER(
    in  bam        input                    "PHASED, duplicate-marked, sorted aligned bam file",
    in  string     sample_id,
    in  string     sex,
    in  string     barcode_whitelist,
    in  tsv        blacklist                "barcode blacklist",
    in  bed        targets,
    in  bedpe      sv_gt_variants,
    in  int        sv_min_qv                "maximum output p-value",
    in  int        sv_min_call_qv_wgs       "used to overwrite automatically computed min score in ANALYZE",
    in  int        sv_min_call_qv_target,
    in  int        sv_min_read_support,
    in  string     reference_path,
    in  json       sv_insert_sizes,
    in  json       sv_basic_summary,
    in  h5         fragments,
    in  json       fragment_histogram,
    in  tsv.gz     fragment_phasing,
    in  h5         barcodes,
    in  json       coverage_summary,
    in  csv        coverage_csv,
    in  h5         coverage,
    in  bool       is_germline,
    out json       sv_summary,
    out bedpe      sv_calls,
    out bedpe      sv_candidates,
    out vcf.gz     svs,
    out vcf.gz.tbi svs_index                "index"                   "svs.vcf.gz.tbi",
    out tsv        sv_call_details,
    out pickle     sv_inv_bc_map,
    out pickle     sv_bc_counts,
    out pickle     sv_win_counts,
    out json       cnv_summary,
    out tsv        cnv_summary_tsv,
    out bedpe      cnv_calls,
    out bedpe      cnv_candidates,
    out vcf.gz     cnvs,
    out vcf.gz.tbi cnvs_index               "index"                   "svs.vcf.gz.tbi",
    out bedpe      cnv_feasible_gt,
    out tsv        cnv_call_tsv,
    out json       combined_sv_summary,
    out tsv        combined_sv_summary_tsv,
    out bedpe      combined_sv_calls,
    out bedpe      combined_sv_candidates,
    out vcf.gz     combined_svs,
    out vcf.gz.tbi combined_svs_index       "index"                   "svs.vcf.gz.tbi",
    out bedpe      combined_sv_feasible_gt,
    out tsv        combined_sv_call_tsv,
    out bw         hp_read_1,
    out bw         hp_read_2,
    out bw         hp_read_0,
    out bw         hp_read_t,
    out bw         hp_bc_1,
    out bw         hp_bc_2,
    out bw         hp_bc_0,
    out bw         hp_bc_t,
)
{
    call _STRUCTVAR_CALLER(
        is_germline           = self.is_germline,
        input                 = self.input,
        sample_id             = self.sample_id,
        sex                   = self.sex,
        barcode_whitelist     = self.barcode_whitelist,
        blacklist             = self.blacklist,
        targets               = self.targets,
        target_extend         = null,
        restrict_locus        = null,
        gt_variants           = self.sv_gt_variants,
        nx                    = 90,
        window_size           = 20000,
        step                  = 20000,
        min_reads             = 500,
        max_bcs_to_call       = 0.999,
        max_merge_dist        = 10000,
        read1_only            = true,
        slide                 = true,
        min_mapq              = 60,
        min_overlap           = 5,
        sv_min_qv             = self.sv_min_qv,
        sv_min_call_qv_wgs    = self.sv_min_call_qv_wgs,
        sv_min_call_qv_target = self.sv_min_call_qv_target,
        min_call_dist         = 35000,
        seg_dup_min_dist      = 20000,
        min_read_support      = self.sv_min_read_support,
        reference_path        = self.reference_path,
        min_dist_from_black   = 10000,
        sv_blacklist_regions  = null,
        seg_dups              = null,
        max_frac_black        = 0.5,
        detect_dists          = [
            1000,
            10000
        ],
        target_dists          = [
            12000,
            25000,
            50000
        ],
        min_sv_len            = 30000,
        insert_sizes          = self.sv_insert_sizes,
        fragments             = self.fragments,
        fragment_histogram    = self.fragment_histogram,
        barcodes              = self.barcodes,
        coverage_summary      = self.coverage_summary,
        coverage              = self.coverage,
        low_depth_min_len     = 30000,
        min_rp_lr_to_call     = 0,
        rp_lr_multiplier      = 0,
        min_frac_overlap      = 0.8,
        min_reads_to_call     = 2,
        rp_break_ext          = 20000,
        min_rel_depth         = 20,
        max_clipped_frac      = 0.1,
        basic_summary         = self.sv_basic_summary,
        fragment_phasing      = self.fragment_phasing,
        coverage_csv          = self.coverage_csv,
        p_ov_mol              = 1e-10,
        grid_len              = 1000,
        max_cand_breaks       = 100,
        overlap_test          = "EXP_COUNT3",
    )

    call _TERMINAL_CNV_CALLER(
        sample_id             = self.sample_id,
        gt_variant            = self.sv_gt_variants,
        reference_path        = self.reference_path,
        blacklist             = null,
        min_rel_overlap       = 0.5,
        min_cnv_len           = 60000,
        possorted_bam         = self.input,
        fragments             = self.fragments,
        fragment_phasing      = self.fragment_phasing,
        coverage              = self.coverage,
        cov_hist              = self.coverage_csv,
        subcommand            = "asread",
        bin_size              = 10000,
        status_change_penalty = 0.0001,
        min_prob              = 0.00033,
        min_dist_from_black   = 0,
        max_frac_black        = 0.5,
        allow_bin_size_adj    = false,
        min_qv                = 35,
        minimal_cnv_size      = 60000,
    )

    call MERGE_SV_CALLS3(
        sv_variants  = _STRUCTVAR_CALLER.sv_candidates,
        cnv_variants = _TERMINAL_CNV_CALLER.terminal_candidates,
        max_dist     = 10000,
        sv_summary   = _STRUCTVAR_CALLER.summary,
    )

    call ANALYZE_SV_COMBINED_CALLS(
        sample_id            = self.sample_id,
        variants             = MERGE_SV_CALLS3.sv_variants,
        gt_variants          = self.sv_gt_variants,
        call_summary         = null,
        coverage             = self.coverage_summary,
        keep_filters         = true,
        min_call_qv_wgs      = self.sv_min_call_qv_wgs,
        min_call_qv_target   = self.sv_min_call_qv_target,
        min_read_support     = self.sv_min_read_support,
        reference_path       = self.reference_path,
        sv_blacklist_regions = null,
        seg_dups             = null,
        min_dist_from_black  = 10000,
        max_frac_black       = 0.5,
        seg_dup_min_dist     = 20000,
        detect_dists         = [
            1000,
            10000
        ],
        min_rel_overlap      = null,
        targets              = self.targets,
        target_dists         = [
            12000,
            25000,
            50000
        ],
        min_sv_len           = 30000,
        min_allelic_frac     = null,
        is_germline          = self.is_germline,
        max_bc_cov_factor    = 3,
        blacklist_mode       = "empty",
        segdup_mode          = "empty",
    )

    return (
        sv_summary              = _STRUCTVAR_CALLER.summary,
        sv_calls                = _STRUCTVAR_CALLER.sv_calls,
        sv_candidates           = _STRUCTVAR_CALLER.sv_candidates,
        svs                     = _STRUCTVAR_CALLER.svs,
        svs_index               = _STRUCTVAR_CALLER.svs_index,
        sv_call_details         = _STRUCTVAR_CALLER.sv_call_details,
        sv_inv_bc_map           = _STRUCTVAR_CALLER.inv_bc_map,
        sv_bc_counts            = _STRUCTVAR_CALLER.bc_counts,
        sv_win_counts           = _STRUCTVAR_CALLER.win_counts,
        cnv_summary             = _TERMINAL_CNV_CALLER.terminal_summary,
        cnv_summary_tsv         = _TERMINAL_CNV_CALLER.terminal_summary_tsv,
        cnv_calls               = _TERMINAL_CNV_CALLER.terminal_calls,
        cnv_candidates          = _TERMINAL_CNV_CALLER.terminal_candidates,
        cnvs                    = _TERMINAL_CNV_CALLER.terminal_cnv,
        cnvs_index              = _TERMINAL_CNV_CALLER.terminal_cnv_index,
        cnv_feasible_gt         = _TERMINAL_CNV_CALLER.terminal_feasible_gt,
        cnv_call_tsv            = _TERMINAL_CNV_CALLER.terminal_call_tsv,
        combined_sv_summary     = ANALYZE_SV_COMBINED_CALLS.summary,
        combined_sv_summary_tsv = ANALYZE_SV_COMBINED_CALLS.summary_tsv,
        combined_sv_calls       = ANALYZE_SV_COMBINED_CALLS.sv_calls,
        combined_sv_candidates  = ANALYZE_SV_COMBINED_CALLS.sv_candidates,
        combined_svs            = ANALYZE_SV_COMBINED_CALLS.svs,
        combined_svs_index      = ANALYZE_SV_COMBINED_CALLS.svs_index,
        combined_sv_feasible_gt = ANALYZE_SV_COMBINED_CALLS.feasible_gt,
        combined_sv_call_tsv    = ANALYZE_SV_COMBINED_CALLS.call_tsv,
        hp_read_1               = _TERMINAL_CNV_CALLER.hp_read_1,
        hp_read_2               = _TERMINAL_CNV_CALLER.hp_read_2,
        hp_read_0               = _TERMINAL_CNV_CALLER.hp_read_0,
        hp_read_t               = _TERMINAL_CNV_CALLER.hp_read_t,
        hp_bc_1                 = _TERMINAL_CNV_CALLER.hp_bc_1,
        hp_bc_2                 = _TERMINAL_CNV_CALLER.hp_bc_2,
        hp_bc_0                 = _TERMINAL_CNV_CALLER.hp_bc_0,
        hp_bc_t                 = _TERMINAL_CNV_CALLER.hp_bc_t,
    )
}
