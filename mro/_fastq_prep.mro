@include "_sort_fastq_by_barcode.mro"
@include "_fastq_sort_stages.mro"
@include "_fastq_prep_stages.mro"

pipeline _FASTQ_PREP_NEW(
    in  string     fastq_mode         "configuration of the input fastqs",
    in  map[]      sample_def,
    in  int        trim_length,
    in  string     sample_id,
    in  map        downsample,
    in  string     barcode_whitelist,
    out fasth.gz[] reads,
    out string[]   read_groups,
    out json       lot_info,
    out json       downsample_info,
)
{
    call local volatile SETUP_CHUNKS(
        sample_id          = self.sample_id,
        downsample         = self.downsample,
        input_mode         = self.fastq_mode,
        sample_def         = self.sample_def,
        barcode_whitelist  = self.barcode_whitelist,
        downsample_overage = 1.25,
    )

    call BUCKET_FASTQS(
        trim_length                 = self.trim_length,
        chunks                      = SETUP_CHUNKS.chunks,
        barcode_whitelist_path      = SETUP_CHUNKS.barcode_whitelist_path,
        max_expected_barcode_errors = 1,
        bc_confidence_threshold     = 0.975,
        requested_read_pairs        = SETUP_CHUNKS.requested_read_pairs,
    )

    call SORT_FASTQS(
        barcode_whitelist_path = SETUP_CHUNKS.barcode_whitelist_path,
        read_buckets           = BUCKET_FASTQS.read_buckets,
        subsample_rate         = BUCKET_FASTQS.final_subsample_rate,
    )

    return (
        reads           = SORT_FASTQS.reads,
        read_groups     = SETUP_CHUNKS.read_groups,
        #FIXME
        lot_info        = null,
        downsample_info = SETUP_CHUNKS.downsample_info,
    )
}

pipeline _FASTQ_PREP(
    in  string     fastq_mode         "configuration of the input fastqs",
    in  map[]      sample_def,
    in  string     sample_id,
    in  map        downsample,
    in  string     barcode_whitelist,
    out fastq.gz[] reads,
    out string[]   read_groups,
    out json       lot_info,
    out json       downsample_info,
)
{
    call local volatile SETUP_CHUNKS(
        sample_id          = self.sample_id,
        downsample         = self.downsample,
        input_mode         = self.fastq_mode,
        sample_def         = self.sample_def,
        barcode_whitelist  = self.barcode_whitelist,
        downsample_overage = 1,
    )

    call volatile TRIM_READS(
        barcode_whitelist = self.barcode_whitelist,
        chunks            = SETUP_CHUNKS.chunks,
        max_read_num      = 10000000,
        read1_trim_length = 0,
        read2_trim_length = 0,
    )

    call _SORT_FASTQ_BY_BARCODE(
        barcode_counts              = TRIM_READS.bc_counts,
        bc_confidence_threshold     = 0.975,
        chunk                       = TRIM_READS.chunks,
        barcode_whitelist           = self.barcode_whitelist,
        max_expected_barcode_errors = 1,
    )

    return (
        reads           = _SORT_FASTQ_BY_BARCODE.reads,
        read_groups     = SETUP_CHUNKS.read_groups,
        lot_info        = TRIM_READS.lot_info,
        downsample_info = SETUP_CHUNKS.downsample_info,
    )
}
