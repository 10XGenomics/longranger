#
# Copyright (c) 2014 10X Genomics, Inc. All rights reserved.
#
@include "_linked_reads_aligner.mro"
@include "_preflight_stages.mro"
@include "_reporter.mro"
@include "_snpindel_phaser.mro"
@include "_structvar_caller_frag.mro"
@include "_cnv_exome.mro"
@include "_loupe_stages.mro"

pipeline PHASER_SVCALLER_EXOME(
    in  string     fastq_mode                  "configuration of the input fastqs",
    in  string     sample_id,
    in  bool       is_germline,
    in  map[]      sample_def,
    in  map        downsample,
    in  vcf.gz     comparison_vcf,
    in  string     sex,
    in  string     reference_path,
    in  bed        targets,
    in  bed        target_blacklist,
    in  map        cov_regions_of_interest,
    in  map        vc_regions_of_interest,
    in  string     restrict_locus              "locus to restrict phasing to",
    in  bool       exclude_non_bc_reads,
    in  int        trim_length,
    in  string     barcode_whitelist,
    in  bed        confident_regions,
    in  string     vc_precalled,
    in  string     vc_mode                     "'freebayes' or 'gatk:/path/to/GenomeAnalysisTK.jar'",
    in  vcf        vc_ground_truth,
    in  bam        validation_bam,
    in  int        sv_min_qv,
    in  int        sv_min_call_qv_wgs,
    in  int        sv_min_call_qv_target,
    in  int        sv_min_read_support,
    in  bedpe      sv_ground_truth,
    in  bedpe      del_ground_truth,
    in  int        vc_max_coverage,
    in  string     sample_desc,
    in  bool       noloupe,
    in  csv        p1_genes_list,
    out bam        phased_possorted_bam,
    out bam.bai    phased_possorted_bam_index,
    out bam        possorted_bam,
    out bam.bai    possorted_bam_index,
    out bed        high_coverage_excluded_bed,
    out bam        bcsorted_bam,
    out json       duplicate_summary,
    out json       basic_summary,
    out h5         barcode_counts,
    out json       insert_sizes,
    out json       target_dists,
    out json       mapq_counts,
    out json       coverage_results,
    out json       attach_phasing_results,
    out h5         coverage_details,
    out h5         target_coverage,
    out csv        coverage_csv,
    out json       single_partition_results,
    out json       filter_barcodes_results,
    out json       length_mass_results,
    out h5         fragments,
    out tsv.gz     fragment_phasing,
    out json       barcode_histogram,
    out json       variant_results,
    out vcf.gz     phased_variants,
    out vcf.gz.tbi phased_variants_index,
    out h5         variants_h5,
    out csv        gene_stats,
    out bedpe      sv_calls,
    out bedpe      sv_candidates,
    out vcf.gz     svs,
    out vcf.gz.tbi svs_index,
    out tsv        sv_gt_results,
    out json       sv_summary,
    out bedpe      short_del_calls,
    out vcf.gz     short_svs,
    out vcf.gz.tbi short_svs_index,
    out json       short_del_summary,
    out json       summary,
    out csv        summary_cs,
    out pickle     inv_bc_map,
    out pickle     bc_counts,
    out pickle     win_counts,
    out loupe      loupe,
    out tsv        barcode_blacklist,
    out json       alarms,
    out txt        alarms_summary,
    out json       lot_info,
    out json       downsample_info,
)
{
    call local preflight PHASER_SVCALLER_PREFLIGHT_LOCAL(
        sample_id         = self.sample_id,
        sample_def        = self.sample_def,
        sex               = self.sex,
        targets           = self.targets,
        target_blacklist  = self.target_blacklist,
        restrict_locus    = self.restrict_locus,
        vc_precalled      = self.vc_precalled,
        vc_mode           = self.vc_mode,
        reference_path    = self.reference_path,
        vc_ground_truth   = self.vc_ground_truth,
        sv_min_qv         = self.sv_min_qv,
        sv_ground_truth   = self.sv_ground_truth,
        check_executables = false,
    )

    call preflight PHASER_SVCALLER_PREFLIGHT(
        sample_id         = self.sample_id,
        sample_def        = self.sample_def,
        sex               = self.sex,
        targets           = self.targets,
        target_blacklist  = self.target_blacklist,
        restrict_locus    = self.restrict_locus,
        vc_precalled      = self.vc_precalled,
        vc_mode           = self.vc_mode,
        reference_path    = self.reference_path,
        vc_ground_truth   = self.vc_ground_truth,
        sv_min_qv         = self.sv_min_qv,
        sv_ground_truth   = self.sv_ground_truth,
        check_executables = true,
    )

    call _LINKED_READS_ALIGNER(
        sample_id                     = self.sample_id,
        fastq_mode                    = self.fastq_mode,
        sample_def                    = self.sample_def,
        trim_length                   = self.trim_length,
        reference_path                = self.reference_path,
        barcode_whitelist             = self.barcode_whitelist,
        targets                       = self.targets,
        downsample                    = self.downsample,
        exclude_non_bc_reads          = self.exclude_non_bc_reads,
        bc_allow_indel                = false,
        bc_max_error_allowed          = 1,
        bc_pseudo_count               = 1,
        bc_use_mapping                = false,
        bc_mapq                       = 30,
        frag_no_merging               = true,
        frag_mapq                     = 30,
        frag_pval                     = 0.001,
        frag_freq                     = 2,
        frag_min_num_reads_off_target = 1,
    )

    call _REPORTER(
        sex                      = self.sex,
        vc_max_coverage          = self.vc_max_coverage,
        bcsorted_bam             = _LINKED_READS_ALIGNER.bcsorted_bam,
        possorted_bam            = _LINKED_READS_ALIGNER.possorted_bam,
        reference_path           = self.reference_path,
        targets                  = self.targets,
        confident_regions        = self.confident_regions,
        barcode_whitelist        = self.barcode_whitelist,
        restrict_locus           = self.restrict_locus,
        lot_info                 = _LINKED_READS_ALIGNER.lot_info,
        coverage_rois            = self.cov_regions_of_interest,
        barcodes                 = _LINKED_READS_ALIGNER.barcodes,
        fragments                = _LINKED_READS_ALIGNER.fragments,
        fragment_histogram       = _LINKED_READS_ALIGNER.fragment_histogram,
        barcode_histogram        = _LINKED_READS_ALIGNER.barcode_histogram,
        single_partition_results = _LINKED_READS_ALIGNER.single_partition_results,
    )

    call _SNPINDEL_PHASER(
        coverage                   = _REPORTER.coverage_details,
        high_coverage_excluded_bed = _REPORTER.high_coverage_excluded_bed,
        sex                        = _REPORTER.sex,
        reference_path             = self.reference_path,
        restrict_locus             = self.restrict_locus,
        targets                    = self.targets,
        comparison_vcf             = self.comparison_vcf,
        vc_regions_of_interest     = self.vc_regions_of_interest,
        input                      = _LINKED_READS_ALIGNER.possorted_bam,
        fragments                  = _REPORTER.fragments,
        vc_precalled               = self.vc_precalled,
        mode                       = self.vc_mode,
        ground_truth               = self.vc_ground_truth,
        validation_bam             = self.validation_bam,
        p1_genes_list              = self.p1_genes_list,
        bc_mix_prob                = 0.001,
        min_var_hap_conf           = 0.995,
        min_junction_hap_conf      = 0.995,
        hap_block_size             = 35,
        hap_block_buffer_size      = 5,
        max_reassign_rounds        = 4,
        min_mapq_attach_bc         = 30,
        chunk_stitching_overlap    = 100000,
    )

    call _STRUCTVAR_CALLER_FRAG(
        input                 = _SNPINDEL_PHASER.phased_possorted_bam,
        sample_id             = self.sample_id,
        is_germline           = self.is_germline,
        sex                   = _REPORTER.sex,
        blacklist             = _REPORTER.barcode_blacklist,
        targets               = self.targets,
        target_extend         = 5000,
        restrict_locus        = null,
        gt_variants           = self.sv_ground_truth,
        nx                    = 90,
        window_size           = 10000,
        step                  = 10000,
        min_reads             = 500,
        max_bcs_to_call       = 5000,
        frag_size_prc         = 0.975,
        max_merge_dist        = 10000,
        read1_only            = true,
        slide                 = true,
        min_mapq              = 60,
        min_overlap           = 4,
        sv_min_qv             = self.sv_min_qv,
        sv_min_call_qv_wgs    = self.sv_min_call_qv_wgs,
        sv_min_call_qv_target = self.sv_min_call_qv_target,
        min_call_dist         = 80000,
        seg_dup_min_dist      = 20000,
        min_read_support      = self.sv_min_read_support,
        reference_path        = self.reference_path,
        min_dist_from_black   = 10000,
        sv_blacklist_regions  = null,
        seg_dups              = null,
        max_frac_black        = 0.5,
        detect_dists          = [
            1000,
            10000,
            50000
        ],
        target_dists          = [
            12000,
            25000,
            50000
        ],
        min_sv_len            = 45000,
        insert_sizes          = _REPORTER.insert_sizes,
        basic_summary         = _REPORTER.basic_summary,
        fragments             = _REPORTER.fragments,
        fragment_histogram    = _LINKED_READS_ALIGNER.fragment_histogram,
        fragment_phasing      = _SNPINDEL_PHASER.fragment_phasing,
        barcodes              = _REPORTER.barcodes,
        coverage_summary      = _REPORTER.coverage_results,
        min_reads_to_call     = 4,
        min_lr_to_call        = 20,
        max_logp              = -15,
        overlap_test          = "BINOM",
        grid_len              = 1000,
        min_bc_overlap        = 2,
        p_ov_mol              = 1e-10,
        break_ext             = 5000,
        min_frag_size         = 0,
        min_reads_per_frag    = 1,
        max_frac_low_mapq     = 0.05,
    )

    call _CNV_EXOME(
        sample_id              = self.sample_id,
        reference_path         = self.reference_path,
        phased_possorted_bam   = _SNPINDEL_PHASER.phased_possorted_bam,
        fragments_h5           = _REPORTER.fragments,
        fragment_phasing       = _SNPINDEL_PHASER.fragment_phasing,
        bin                    = 50,
        maxNormalGap           = 0,
        maxHomoGap             = 1000,
        overlap                = 20,
        mapq                   = 0,
        maxUnknownGap          = 0,
        minNumExons            = 1,
        BGImparityPvalFlt      = 0.003,
        BGBaseCovFlt           = 6.2,
        BGPhaseFracFlt         = 0.52,
        low_coverage_blacklist = self.target_blacklist,
        het_del_stratification = {},
        blacklist_map          = null,
        nearTargetBin          = [],
        addOffTarget           = true,
        queryRegions           = self.targets,
        wgs_deletions_gt       = self.del_ground_truth,
        min_overlap            = 75,
        inferred_total_mass_ng = null,
        length_mass            = null,
    )

    call SUMMARIZE_REPORTS(
        sample_id                = self.sample_id,
        reference_path           = self.reference_path,
        targets                  = self.targets,
        trim_length              = self.trim_length,
        duplicate_summary        = _LINKED_READS_ALIGNER.duplicate_summary,
        basic_results            = _REPORTER.basic_summary,
        barcode_counts           = _REPORTER.barcode_counts,
        filter_barcodes_results  = _REPORTER.filter_barcodes_results,
        coverage_results         = _REPORTER.coverage_results,
        coverage_details         = _REPORTER.coverage_details,
        variant_results          = _SNPINDEL_PHASER.results,
        sv_results               = _STRUCTVAR_CALLER_FRAG.summary,
        sv_min_call_qv_wgs       = self.sv_min_call_qv_wgs,
        sv_min_call_qv_target    = self.sv_min_call_qv_target,
        short_del_results        = _CNV_EXOME.summary,
        single_partition_results = _LINKED_READS_ALIGNER.single_partition_results,
        length_mass_results      = _REPORTER.length_mass_results,
        bam_file                 = _SNPINDEL_PHASER.phased_possorted_bam,
        lot_info                 = _REPORTER.lot_info,
        downsample_info          = _LINKED_READS_ALIGNER.downsample_info,
    )

    call LOUPE_PREPROCESS(
        reference_path          = self.reference_path,
        input_vcf               = _SNPINDEL_PHASER.phased_variants,
        summarize_output        = SUMMARIZE_REPORTS.summary,
        single_partition_data   = _LINKED_READS_ALIGNER.single_partition_results,
        coverage_data           = _REPORTER.coverage_results,
        fragment_histogram      = _LINKED_READS_ALIGNER.fragment_histogram,
        phasing_quality_data    = _SNPINDEL_PHASER.results,
        sorted_deduplicated_bam = _SNPINDEL_PHASER.phased_possorted_bam,
        structvar_data          = _STRUCTVAR_CALLER_FRAG.sv_candidates,
        shortstructvar_data     = _CNV_EXOME.deletions,
        bkpt_details            = null,
        alarms                  = SUMMARIZE_REPORTS.alarms,
        targets                 = self.targets,
        fragments               = _SNPINDEL_PHASER.fragment_phasing,
        length_mass_data        = _REPORTER.length_mass_results,
        sample_desc             = self.sample_desc,
        noloupe                 = self.noloupe,
    )

    return (
        duplicate_summary          = _LINKED_READS_ALIGNER.duplicate_summary,
        phased_possorted_bam       = _SNPINDEL_PHASER.phased_possorted_bam,
        phased_possorted_bam_index = _SNPINDEL_PHASER.phased_possorted_bam_index,
        possorted_bam              = _LINKED_READS_ALIGNER.possorted_bam,
        possorted_bam_index        = _LINKED_READS_ALIGNER.possorted_bam_index,
        bcsorted_bam               = _LINKED_READS_ALIGNER.bcsorted_bam,
        variant_results            = _SNPINDEL_PHASER.results,
        phased_variants            = _SNPINDEL_PHASER.phased_variants,
        phased_variants_index      = _SNPINDEL_PHASER.phased_variants_index,
        variants_h5                = _SNPINDEL_PHASER.variants_h5,
        gene_stats                 = _SNPINDEL_PHASER.gene_stats,
        basic_summary              = _REPORTER.basic_summary,
        barcode_counts             = _REPORTER.barcode_counts,
        insert_sizes               = _REPORTER.insert_sizes,
        target_dists               = _REPORTER.target_dists,
        mapq_counts                = _REPORTER.mapq_counts,
        coverage_results           = _REPORTER.coverage_results,
        coverage_details           = _REPORTER.coverage_details,
        high_coverage_excluded_bed = _REPORTER.high_coverage_excluded_bed,
        target_coverage            = _REPORTER.target_coverage,
        coverage_csv               = _REPORTER.coverage_csv,
        single_partition_results   = _LINKED_READS_ALIGNER.single_partition_results,
        filter_barcodes_results    = _REPORTER.filter_barcodes_results,
        length_mass_results        = _REPORTER.length_mass_results,
        fragments                  = _REPORTER.fragments,
        fragment_phasing           = _SNPINDEL_PHASER.fragment_phasing,
        barcode_histogram          = _LINKED_READS_ALIGNER.barcode_histogram,
        sv_calls                   = _STRUCTVAR_CALLER_FRAG.sv_calls,
        sv_candidates              = _STRUCTVAR_CALLER_FRAG.sv_candidates,
        svs                        = _STRUCTVAR_CALLER_FRAG.svs,
        svs_index                  = _STRUCTVAR_CALLER_FRAG.svs_index,
        sv_gt_results              = _STRUCTVAR_CALLER_FRAG.sv_call_details,
        sv_summary                 = _STRUCTVAR_CALLER_FRAG.summary,
        inv_bc_map                 = _STRUCTVAR_CALLER_FRAG.inv_bc_map,
        bc_counts                  = _STRUCTVAR_CALLER_FRAG.bc_counts,
        win_counts                 = _STRUCTVAR_CALLER_FRAG.win_counts,
        short_del_calls            = _CNV_EXOME.deletions,
        short_del_summary          = _CNV_EXOME.summary,
        short_svs                  = _CNV_EXOME.deletions_vcf,
        short_svs_index            = _CNV_EXOME.deletions_vcf_index,
        summary                    = SUMMARIZE_REPORTS.summary,
        summary_cs                 = SUMMARIZE_REPORTS.summary_cs,
        loupe                      = LOUPE_PREPROCESS.output_for_loupe,
        barcode_blacklist          = _REPORTER.barcode_blacklist,
        alarms                     = SUMMARIZE_REPORTS.alarms,
        alarms_summary             = SUMMARIZE_REPORTS.alarms_summary,
        attach_phasing_results     = _SNPINDEL_PHASER.summary,
        lot_info                   = _REPORTER.lot_info,
        downsample_info            = _LINKED_READS_ALIGNER.downsample_info,
    )
}
